version: '3.9'
services:
  clickhouse:
    image: clickhouse/clickhouse-server:23.11
    restart: on-failure
    ports:
      - '8123:8123'
    volumes:
      - highlight-data:/var/lib/clickhouse
    ulimits:
      nofile:
        soft: 262144
        hard: 262144
  postgres:
    image: postgres:15
    restart: on-failure
    ports:
      - '5432:5432'
    volumes:
      - highlight-data:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD-highlight}
  redis:
    image: redis:7.2.5
    restart: on-failure
    ports:
      - '6379:6379'
  zookeeper:
    image: bitnami/zookeeper:3.7
    restart: on-failure
    ports:
      - '2181:2181'
    volumes:
      - highlight-data:/bitnami
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
  kafka:
    image: bitnami/kafka:3.4.0
    restart: on-failure
    ports:
      - '9092:9092'
      - '9093:9093'
    volumes:
      - highlight-data:/bitnami
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9093
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS=0
    depends_on:
      - zookeeper
  otel:
    image: otel/opentelemetry-collector-contrib:0.97.0
    restart: on-failure
    command: --config=/etc/otel-collector-config.yml
    volumes:
      - ./otel-collector-config.yml:/etc/otel-collector-config.yml
    ports:
      - '4318:4318'
      - '4317:4317'
    depends_on:
      - clickhouse
  backend:
    container_name: backend
    image: ${BACKEND_IMAGE_NAME-ghcr.io/highlight/highlight-backend:latest}
    restart: on-failure
    ports:
      - '0.0.0.0:8082:8082'
    volumes:
      - highlight-data:/highlight-data
    env_file: .env
    depends_on:
      - postgres
      - redis
      - kafka
      - clickhouse
      - otel
    labels:
      - traefik.enable=true
      - traefik.http.routers.highlight-backend.rule=Host(`${SERVICE_FQDN_BACKEND}`)
      - traefik.http.routers.highlight-backend.entrypoints=websecure
      - traefik.http.routers.highlight-backend.tls.certresolver=letsencrypt
      - traefik.http.services.highlight-backend.loadbalancer.server.port=8082
  frontend:
    container_name: frontend
    image: ${FRONTEND_IMAGE_NAME-ghcr.io/highlight/highlight-frontend:latest}
    restart: on-failure
    ports:
      - '0.0.0.0:3000:3000'
      - '0.0.0.0:6006:6006'
      - '0.0.0.0:8080:8080'
    env_file: .env
    labels:
      - traefik.enable=true
      - traefik.http.routers.highlight-frontend.rule=Host(`${SERVICE_FQDN_FRONTEND}`) && PathPrefix(`/`)
      - traefik.http.routers.highlight-frontend.entrypoints=websecure
      - traefik.http.routers.highlight-frontend.tls.certresolver=letsencrypt
      - traefik.http.services.highlight-frontend.loadbalancer.server.port=3000
volumes:
  highlight-data:
